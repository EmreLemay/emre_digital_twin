'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import MenuBar from '../components/MenuBar'
import MotherGLBViewer from '../components/MotherGLBViewer'

export default function MotherViewerPage() {
  const [motherFile, setMotherFile] = useState<string | null>(null)
  const [uploadedFileName, setUploadedFileName] = useState<string>('No file uploaded')
  const [uploading, setUploading] = useState(false)
  const [selectedVolume, setSelectedVolume] = useState<any>(null)
  const [revitData, setRevitData] = useState<any>(null)
  const [hierarchyData, setHierarchyData] = useState<any>(null)
  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set())
  const [hasExistingFile, setHasExistingFile] = useState(false)
  const [fileLastModified, setFileLastModified] = useState<string>('')
  const [panelSplit, setPanelSplit] = useState(70) // Default 70% for 3D viewer, 30% for right panel
  const [isResizing, setIsResizing] = useState(false)
  
  // Master building GUID - permanent top of hierarchy
  const MASTER_BUILDING_GUID = '5ed5a9ae-bb0a-4af2-bf7c-25da60493dd0-003f9206'
  
  // Helper function to get level names
  const getLevelName = (level: number): string => {
    const levelNames = ['Master', 'Floor', 'O_DD1', 'O_DD2', 'O_DD3', 'O_DD4']
    return levelNames[level] || `Level ${level}`
  }

  // SIMPLIFIED: Basic volume visibility state
  const [allVolumeGuids, setAllVolumeGuids] = useState<string[]>([])
  const [selectedVolumeGuid, setSelectedVolumeGuid] = useState<string | null>(null)
  const [visibleGuids, setVisibleGuids] = useState<Set<string>>(new Set()) // Only for 3D viewer
  
  // DISABLED: Complex hierarchy state (preserved for future re-activation)
  // const [currentHierarchyLevel, setCurrentHierarchyLevel] = useState(0)
  // const [hierarchyBreadcrumbs, setHierarchyBreadcrumbs] = useState<Array<{guid: string, name: string, level: number}>>([])
  // const [selectableGuids, setSelectableGuids] = useState<Set<string>>(new Set()

  // Load panel split from localStorage and check for existing file
  useEffect(() => {
    checkForExistingFile()
    
    // Load saved panel split
    const savedSplit = localStorage.getItem('mother-viewer-panel-split')
    if (savedSplit) {
      const splitValue = parseFloat(savedSplit)
      if (splitValue >= 40 && splitValue <= 85) {
        setPanelSplit(splitValue)
      }
    }
  }, [])

  // Save panel split to localStorage
  useEffect(() => {
    localStorage.setItem('mother-viewer-panel-split', panelSplit.toString())
  }, [panelSplit])

  const checkForExistingFile = async () => {
    try {
      const response = await fetch('/api/mother-glb/check')
      const result = await response.json()
      
      if (result.exists) {
        setHasExistingFile(true)
        setFileLastModified(result.lastModified || '')
        setUploadedFileName(result.fileName || 'mother.glb')
        // Auto-load the existing file
        setMotherFile('/mother-glb/mother.glb')
        console.log('üìÅ Found existing mother GLB file:', result.fileName)
      } else {
        setHasExistingFile(false)
        console.log('üìÇ No existing mother GLB file found')
      }
    } catch (error) {
      console.error('Error checking for existing file:', error)
    }
  }

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    // Validate file type
    if (!file.name.toLowerCase().endsWith('.glb')) {
      alert('Please select a GLB file')
      return
    }

    // Check file size (reasonable limit for mother file)
    const maxSize = 50 * 1024 * 1024 // 50MB
    if (file.size > maxSize) {
      alert(`File is too large (${(file.size / 1024 / 1024).toFixed(1)}MB). Maximum size is 50MB.`)
      return
    }

    try {
      setUploading(true)
      const formData = new FormData()
      formData.append('file', file)

      const response = await fetch('/api/mother-glb/upload', {
        method: 'POST',
        body: formData
      })

      const result = await response.json()

      if (!result.success) {
        alert(`Upload failed: ${result.error}`)
        return
      }

      console.log(`Mother GLB uploaded successfully: ${result.publicPath}`)
      setMotherFile(result.publicPath)
      setUploadedFileName(file.name)
      
      // Update file status after successful upload
      await checkForExistingFile()
      
    } catch (error) {
      console.error('Upload error:', error)
      alert('Failed to upload mother GLB file. Please try again.')
    } finally {
      setUploading(false)
    }
  }

  const clearPersistentFile = async () => {
    if (!confirm('Are you sure you want to delete the persistent mother GLB file?')) {
      return
    }

    try {
      const response = await fetch('/api/mother-glb/clear', {
        method: 'DELETE'
      })
      const result = await response.json()
      
      if (result.success) {
        console.log('üóëÔ∏è Persistent mother GLB file cleared')
        setHasExistingFile(false)
        setMotherFile(null)
        setUploadedFileName('No file uploaded')
        setFileLastModified('')
        setHierarchyData(null)
        setSelectedVolume(null)
        setRevitData(null)
      } else {
        alert(`Failed to clear file: ${result.error}`)
      }
    } catch (error) {
      console.error('Error clearing persistent file:', error)
      alert('Failed to clear persistent file.')
    }
  }

  // Panel resize handlers
  const handleMouseDown = (e: React.MouseEvent) => {
    setIsResizing(true)
    e.preventDefault()
    
    const startY = e.clientY
    let currentResizing = true
    
    const handleMouseMove = (e: MouseEvent) => {
      if (!currentResizing) return
      
      const containerRect = document.querySelector('.resize-container')?.getBoundingClientRect()
      if (!containerRect) return
      
      const x = e.clientX - containerRect.left
      const percentage = Math.round((x / containerRect.width) * 100)
      
      // Constrain between 40% and 85%
      const constrainedPercentage = Math.max(40, Math.min(85, percentage))
      setPanelSplit(constrainedPercentage)
    }
    
    const handleMouseUp = () => {
      currentResizing = false
      setIsResizing(false)
      document.removeEventListener('mousemove', handleMouseMove)
      document.removeEventListener('mouseup', handleMouseUp)
    }
    
    document.addEventListener('mousemove', handleMouseMove)
    document.addEventListener('mouseup', handleMouseUp)
  }

  // Double-click to reset to default 70/30 split
  const handleDoubleClick = () => {
    setPanelSplit(70)
  }

  // SIMPLIFIED: Initialize with no volumes visible
  useEffect(() => {
    console.log('üìã SIMPLE DEBUG: useEffect[motherFile] triggered')
    console.log('üìã SIMPLE DEBUG: motherFile value:', motherFile)
    
    if (motherFile) {
      console.log('üöÄ SIMPLE DEBUG: GLB loaded, waiting for volume list')
      // Reset to show nothing initially
      setVisibleGuids(new Set())
      setSelectedVolumeGuid(null)
      console.log('üè¢ SIMPLE DEBUG: Initialized with no volumes visible')
    } else {
      console.log('‚ùå SIMPLE DEBUG: No motherFile, clearing state')
      setAllVolumeGuids([])
      setVisibleGuids(new Set())
      setSelectedVolumeGuid(null)
    }
  }, [motherFile])

  const initializeHierarchyLevel = async () => {
    try {
      // Reset to Master level
      setCurrentHierarchyLevel(0)
      setHierarchyBreadcrumbs([])
      setVisibleGuids(new Set([MASTER_BUILDING_GUID]))
      setSelectableGuids(new Set([MASTER_BUILDING_GUID]))
      console.log('üîÑ Resetting to Master level')
    } catch (error) {
      console.error('Error initializing hierarchy level:', error)
    }
  }

  // Helper function to find child volumes using LCX_GUID_PARENT_01_GUID hierarchy
  const findChildVolumes = async (parentGuid: string, filterOptions?: {
    volumeCategory?: string,
    o_ddLevel?: number
  }): Promise<string[]> => {
    console.log(`üîç DEBUG: ========== FINDING CHILD VOLUMES ==========`)
    console.log(`üîç DEBUG: Parent GUID: ${parentGuid}`)
    console.log(`üîç DEBUG: Search options:`, filterOptions)
    console.log(`üîç DEBUG: allVolumeGuids length:`, allVolumeGuids.length)
    console.log(`üîç DEBUG: visibleGuids size:`, visibleGuids.size)
    console.log(`üîç DEBUG: selectableGuids size:`, selectableGuids.size)
    
    if (filterOptions?.volumeCategory) {
      console.log(`üîç DEBUG: Filtering by VOLUME_CATEGORY: "${filterOptions.volumeCategory}"`)
    }
    if (filterOptions?.o_ddLevel) {
      console.log(`üîç DEBUG: Filtering by pure O_DD${filterOptions.o_ddLevel} classification`)
    }
    
    const childVolumes: string[] = []
    
    // Use all volume GUIDs for comprehensive search
    const searchGuids = allVolumeGuids.length > 0 ? new Set(allVolumeGuids) : new Set([
      ...Array.from(visibleGuids)
    ])
    
    console.log(`üîç DEBUG: Search GUIDs available:`, searchGuids.size)
    console.log(`üîç DEBUG: First 5 search GUIDs:`, Array.from(searchGuids).slice(0, 5))
    
    if (searchGuids.size === 0) {
      console.log('‚ùå DEBUG: No volume GUIDs available for child search')
      return []
    }
    
    let processedCount = 0
    for (const volumeGuid of searchGuids) {
      processedCount++
      if (processedCount <= 3 || processedCount % 10 === 0) {
        console.log(`üîç DEBUG: Processing volume ${processedCount}/${searchGuids.size}: ${volumeGuid}`)
      }
      
      try {
        const response = await fetch(`/api/assets/revit-metadata?filepath=${volumeGuid}.glb`)
        const result = await response.json()
        
        if (result.success && result.metadata) {
          let isChild = false
          let passesFilters = true
          
          // Check if this volume is a child of the parent
          const parentParam = Object.entries(result.metadata).find(([key, value]: [string, any]) => {
            const paramName = key.toLowerCase()
            return paramName.includes('lcx_guid_parent_01_guid')
          })
          
          if (parentParam) {
            const parentValue = parentParam[1]?.value
            isChild = parentValue === parentGuid
            if (isChild && processedCount <= 5) {
              console.log(`‚úÖ DEBUG: Found child! Volume ${volumeGuid} has parent ${parentValue}`)
            }
          }
          
          if (!isChild) continue
          
          // Apply volume category filter if specified
          if (filterOptions?.volumeCategory) {
            const categoryParam = Object.entries(result.metadata).find(([key, value]: [string, any]) => {
              const paramName = key.toLowerCase()
              return paramName.includes('volume_category')
            })
            
            const categoryValue = categoryParam?.[1]?.value
            if (categoryValue?.toUpperCase() !== filterOptions.volumeCategory.toUpperCase()) {
              passesFilters = false
            }
          }
          
          // Apply O_DD level filter if specified
          if (filterOptions?.o_ddLevel && passesFilters) {
            const o_ddLevels: { [key: number]: string | null } = {
              1: null, 2: null, 3: null, 4: null
            }
            
            // Check all O_DD parameters
            Object.entries(result.metadata).forEach(([key, value]: [string, any]) => {
              const paramName = key.toLowerCase()
              const paramValue = value?.value
              
              const hasValue = paramValue && 
                paramValue !== '' && 
                paramValue !== 'null' && 
                paramValue !== 'undefined' &&
                String(paramValue).trim() !== ''
              
              if (!hasValue) return
              
              for (let level = 1; level <= 4; level++) {
                if (paramName.includes(`o_dd${level}`) || paramName.includes(`o dd${level}`)) {
                  o_ddLevels[level] = paramValue
                  break
                }
              }
            })
            
            // Check if volume is pure at the target O_DD level
            const targetLevel = filterOptions.o_ddLevel
            const hasAllRequiredLevels = Array.from({length: targetLevel}, (_, i) => i + 1)
              .every(level => o_ddLevels[level] !== null)
            
            const hasNoHigherLevels = Array.from({length: 4 - targetLevel}, (_, i) => targetLevel + 1 + i)
              .every(level => o_ddLevels[level] === null)
            
            const isPureTargetLevel = hasAllRequiredLevels && hasNoHigherLevels
            
            if (!isPureTargetLevel) {
              passesFilters = false
            }
          }
          
          if (passesFilters) {
            console.log(`‚úÖ DEBUG: Child volume found and passed filters: ${volumeGuid}`)
            childVolumes.push(volumeGuid)
          } else {
            console.log(`‚ùå DEBUG: Child volume found but failed filters: ${volumeGuid}`)
          }
        } else {
          if (processedCount <= 3) {
            console.log(`‚ö†Ô∏è DEBUG: No metadata for volume: ${volumeGuid}`)
          }
        }
      } catch (error) {
        // Continue on error
        if (processedCount <= 3) {
          console.log(`‚ö†Ô∏è DEBUG: Could not fetch metadata for ${volumeGuid}:`, error)
        }
      }
    }
    
    console.log(`üìä Found ${childVolumes.length} child volumes`)
    return childVolumes
  }

  const drillDownToLevel = async (selectedVolume: any, targetLevel: number) => {
    try {
      const levelNames = ['Master', 'Floor', 'O_DD1', 'O_DD2', 'O_DD3', 'O_DD4']
      console.log(`üéØ DEBUG: ========== DRILL DOWN TO LEVEL ==========`)
      console.log(`üéØ DEBUG: Current level: ${currentHierarchyLevel} (${levelNames[currentHierarchyLevel]})`)
      console.log(`üéØ DEBUG: Target level: ${targetLevel} (${levelNames[targetLevel]})`)
      console.log(`üéØ DEBUG: Selected volume:`, selectedVolume)
      console.log(`üéØ DEBUG: Selected volume GUID:`, selectedVolume.guid)
      console.log(`üéØ DEBUG: Selected volume name:`, selectedVolume.name)
      
      let childVolumes: string[] = []
      
      if (currentHierarchyLevel === 0 && targetLevel === 1) {
        // Master ‚Üí Floors: Find volumes with VOLUME_CATEGORY = "FLOOR" that are children of master
        console.log(`üè¢ Finding floors under master building`)
        childVolumes = await findChildVolumes(MASTER_BUILDING_GUID, {
          volumeCategory: 'FLOOR'
        })
      } 
      else if (currentHierarchyLevel === 1 && targetLevel === 2) {
        // Floor ‚Üí O_DD1: Find pure O_DD1 volumes that are children of the selected floor
        console.log(`üéØ Finding O_DD1 systems under selected floor`)
        childVolumes = await findChildVolumes(selectedVolume.guid, {
          o_ddLevel: 1
        })
      }
      else if (currentHierarchyLevel >= 2 && currentHierarchyLevel <= 4) {
        // O_DD1 ‚Üí O_DD2, O_DD2 ‚Üí O_DD3, O_DD3 ‚Üí O_DD4
        const nextO_DDLevel = currentHierarchyLevel + 1
        console.log(`üîß Finding O_DD${nextO_DDLevel} components under selected O_DD${currentHierarchyLevel}`)
        childVolumes = await findChildVolumes(selectedVolume.guid, {
          o_ddLevel: nextO_DDLevel
        })
      }
      else {
        console.log(`‚ùå Invalid drill-down transition from level ${currentHierarchyLevel} to ${targetLevel}`)
        return
      }
      
      console.log(`üéØ DEBUG: Found ${childVolumes.length} child volumes:`, childVolumes.slice(0, 5))
      
      if (childVolumes.length > 0) {
        // Update breadcrumbs
        const newBreadcrumb = {
          guid: selectedVolume.guid,
          name: selectedVolume.name || selectedVolume.guid,
          level: currentHierarchyLevel
        }
        console.log(`üéØ DEBUG: Adding breadcrumb:`, newBreadcrumb)
        setHierarchyBreadcrumbs(prev => [...prev, newBreadcrumb])
        
        // Update visible and selectable items to child volumes
        const childGuids = new Set(childVolumes)
        console.log(`üéØ DEBUG: Setting visible GUIDs to:`, Array.from(childGuids).slice(0, 5))
        console.log(`üéØ DEBUG: Setting selectable GUIDs to:`, Array.from(childGuids).slice(0, 5))
        console.log(`üéØ DEBUG: Setting hierarchy level to:`, targetLevel)
        
        setVisibleGuids(childGuids)
        setSelectableGuids(childGuids)
        setCurrentHierarchyLevel(targetLevel)
        
        console.log(`‚úÖ DEBUG: Successfully drilled down to ${childVolumes.length} ${levelNames[targetLevel]} volumes`)
      } else {
        console.log(`‚ùå DEBUG: No ${levelNames[targetLevel]} volumes found under selected ${levelNames[currentHierarchyLevel]}`)
      }
    } catch (error) {
      console.error('Error drilling down hierarchy:', error)
    }
  }

  const navigateBackToLevel = async (targetBreadcrumb: {guid: string, name: string, level: number}) => {
    try {
      // Remove breadcrumbs after target level
      const targetIndex = hierarchyBreadcrumbs.findIndex(b => b.guid === targetBreadcrumb.guid)
      const newBreadcrumbs = hierarchyBreadcrumbs.slice(0, targetIndex)
      setHierarchyBreadcrumbs(newBreadcrumbs)
      
      if (newBreadcrumbs.length === 0) {
        // Back to Master level
        initializeHierarchyLevel()
      } else {
        // Back to specific parent level
        const parentBreadcrumb = newBreadcrumbs[newBreadcrumbs.length - 1]
        await drillDownToLevel(parentBreadcrumb, targetBreadcrumb.level)
      }
    } catch (error) {
      console.error('Error navigating back:', error)
    }
  }

  // Store all volume O_DD data for efficient searching
  const [volumeO_DDCache, setVolumeO_DDCache] = useState<Map<string, {[key: number]: string | null}>>(new Map())

  // CLEANED UP: Duplicate allVolumeGuids declaration removed

  const handleAllVolumesLoad = (all_guids: string[]) => {
    // SIMPLIFIED: Just store all available volume GUIDs
    console.log('üì¶ SIMPLE DEBUG: handleAllVolumesLoad called')
    console.log('üì¶ SIMPLE DEBUG: Received', all_guids.length, 'total volumes')
    console.log('üì¶ SIMPLE DEBUG: First 10 GUIDs:', all_guids.slice(0, 10))
    
    // Store all GUIDs for the volume list
    setAllVolumeGuids(all_guids)
    console.log('‚úÖ SIMPLE DEBUG: Volume list updated with', all_guids.length, 'items')
  }

  const handleVolumeLoad = (o_dd1_guids: string[]) => {
    // SIMPLIFIED: Ignore O_DD1 auto-detection for now
    console.log('üéØ SIMPLE DEBUG: handleVolumeLoad called - IGNORING for simplified mode')
    console.log('üéØ SIMPLE DEBUG: Would have received:', o_dd1_guids.length, 'O_DD1 volumes')
    console.log('‚ö†Ô∏è SIMPLE DEBUG: Not auto-showing any volumes - user will select manually')
    // Do nothing - let user manually select volumes from the list
  }

  const handleVolumeSelect = async (volumeData: any, hierarchyInfo?: any) => {
    console.log(`üíÜ DEBUG: ========== VOLUME SELECTED ==========`)
    console.log(`üíÜ DEBUG: volumeData:`, volumeData)
    console.log(`üíÜ DEBUG: volumeData.guid:`, volumeData?.guid)
    console.log(`üíÜ DEBUG: currentHierarchyLevel:`, currentHierarchyLevel)
    console.log(`üíÜ DEBUG: selectableGuids:`, Array.from(selectableGuids))
    console.log(`üíÜ DEBUG: is selectable?`, volumeData?.guid && selectableGuids.has(volumeData.guid))
    
    setSelectedVolume(volumeData)
    
    // Update hierarchy data if provided
    if (hierarchyInfo) {
      console.log(`üíÜ DEBUG: hierarchy data provided:`, hierarchyInfo)
      setHierarchyData(hierarchyInfo)
    }
    
    // Check if this selection should trigger drill-down
    if (volumeData?.guid && selectableGuids.has(volumeData.guid)) {
      // Only drill down if we're not at the deepest level (O_DD4)
      if (currentHierarchyLevel < 4) {
        console.log(`‚úÖ DEBUG: Triggering drill-down from level ${currentHierarchyLevel} to ${currentHierarchyLevel + 1}`)
        await drillDownToLevel(volumeData, currentHierarchyLevel + 1)
      } else {
        console.log(`‚ö†Ô∏è DEBUG: At deepest level (${currentHierarchyLevel}), no drill-down`)
      }
    } else {
      console.log(`‚ùå DEBUG: Volume not selectable or no GUID, no drill-down`)
    }
    
    if (volumeData?.guid) {
      try {
        // Fetch Revit data using the existing API
        const response = await fetch(`/api/assets/revit-metadata?filepath=${volumeData.guid}.glb`)
        const result = await response.json()
        
        if (result.success && result.metadata) {
          // Convert metadata object to array format
          const metadataArray = Object.entries(result.metadata).map(([key, value]: [string, any]) => ({
            parameterName: key,
            parameterValue: value.value,
            parameterType: value.type
          }))
          
          setRevitData({
            ...result.asset,
            metadata: metadataArray
          })
        } else {
          setRevitData(null)
        }
      } catch (error) {
        console.error('Error fetching Revit data:', error)
        setRevitData(null)
      }
    }
  }

  // Toggle expanded state for a node
  const toggleNodeExpansion = (nodeGuid: string) => {
    setExpandedNodes(prev => {
      const newSet = new Set(prev)
      if (newSet.has(nodeGuid)) {
        newSet.delete(nodeGuid)
      } else {
        newSet.add(nodeGuid)
      }
      return newSet
    })
  }


  return (
    <>
      <MenuBar />
      <div className="min-h-screen bg-gray-900 text-white">
      {/* Header */}
      <div className="bg-gray-800 border-b border-gray-700 p-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Mother GLB Viewer</h1>
            <p className="text-gray-400 mt-1">
              Upload and interact with bounding box representations of your assets
            </p>
          </div>
          
          {/* Hierarchy Navigation Breadcrumbs */}
          <div className="flex items-center gap-2">
            <span className="text-sm text-gray-400">Level:</span>
            <button
              onClick={() => initializeHierarchyLevel()}
              className={`px-3 py-1 rounded text-sm transition-colors ${
                currentHierarchyLevel === 0 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-600 hover:bg-gray-500 text-gray-300'
              }`}
            >
              Master
            </button>
            
            {hierarchyBreadcrumbs.map((breadcrumb, index) => (
              <div key={breadcrumb.guid} className="flex items-center gap-2">
                <span className="text-gray-500">‚Üí</span>
                <button
                  onClick={() => navigateBackToLevel(breadcrumb)}
                  className={`px-3 py-1 rounded text-sm transition-colors ${
                    currentHierarchyLevel === breadcrumb.level + 1 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gray-600 hover:bg-gray-500 text-gray-300'
                  }`}
                >
                  {getLevelName(breadcrumb.level + 1)}
                </button>
              </div>
            ))}
            
            {currentHierarchyLevel > 1 && (
              <div className="flex items-center gap-2 ml-4">
                <span className="text-xs text-gray-500">({visibleGuids.size} items)</span>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex h-screen resize-container">
        {/* Left Panel - 3D Viewer (Dynamic) */}
        <div className="p-6" style={{ width: `${panelSplit}%` }}>
          <div className="bg-gray-800 rounded-lg h-full">
            {motherFile ? (
              <MotherGLBViewer 
                modelUrl={motherFile}
                onVolumeSelect={handleVolumeSelect}
                onVolumeLoad={handleVolumeLoad}
                onAllVolumesLoad={handleAllVolumesLoad}
                visibleGuids={Array.from(visibleGuids)}
                selectableGuids={Array.from(visibleGuids)} // Same as visible for simplicity
                hierarchyLevel={0} // Fixed at 0 for simplified mode
                shouldZoomToVisible={visibleGuids.size > 0}
              />
            ) : (
              <div className="flex items-center justify-center h-full text-gray-400">
                <div className="text-center">
                  <div className="text-4xl mb-4">üìÅ</div>
                  <p>No Mother GLB File Loaded</p>
                  <p className="text-sm mt-2">Upload a GLB file to begin exploring bounding boxes</p>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Drag Handle */}
        <div 
          className={`relative w-1 bg-gray-600 hover:bg-gray-500 cursor-col-resize flex items-center justify-center transition-colors ${
            isResizing ? 'bg-blue-500' : ''
          }`}
          onMouseDown={handleMouseDown}
          onDoubleClick={handleDoubleClick}
          title="Drag to resize panels, double-click to reset to 70/30"
        >
          {/* Grip indicator */}
          <div className="flex flex-col gap-1">
            <div className="w-0.5 h-1 bg-gray-300 rounded"></div>
            <div className="w-0.5 h-1 bg-gray-300 rounded"></div>
            <div className="w-0.5 h-1 bg-gray-300 rounded"></div>
          </div>
          
          {/* Show ratio during resize */}
          {isResizing && (
            <div className="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white text-xs px-2 py-1 rounded shadow">
              {panelSplit}% / {100 - panelSplit}%
            </div>
          )}
        </div>

        {/* Right Panel - SIMPLIFIED Volume List */}
        <div className="border-l border-gray-700 p-6" style={{ width: `${100 - panelSplit}%` }}>
          <div className="space-y-4 h-full overflow-y-auto">
            {/* SIMPLIFIED Volume List Panel */}
            <div className="bg-gray-800 rounded-lg p-4">
              <div className="flex justify-between items-center mb-3">
                <h3 className="text-lg font-semibold">Volume List ({allVolumeGuids.length})</h3>
                <div className="space-x-2">
                  <button
                    onClick={() => {
                      setVisibleGuids(new Set(allVolumeGuids))
                      setSelectedVolumeGuid(null)
                      console.log('‚úÖ SIMPLE DEBUG: Showing all volumes')
                    }}
                    className="px-2 py-1 bg-green-600 hover:bg-green-700 text-white text-xs rounded"
                  >
                    Show All
                  </button>
                  <button
                    onClick={() => {
                      setVisibleGuids(new Set())
                      setSelectedVolumeGuid(null)
                      console.log('‚ùå SIMPLE DEBUG: Hiding all volumes')
                    }}
                    className="px-2 py-1 bg-red-600 hover:bg-red-700 text-white text-xs rounded"
                  >
                    Hide All
                  </button>
                </div>
              </div>
              {motherFile && allVolumeGuids.length > 0 ? (
                <div className="space-y-2 max-h-96 overflow-y-auto">
                  {allVolumeGuids.map((guid, index) => (
                    <button
                      key={guid}
                      onClick={() => handleVolumeListSelect(guid)}
                      className={`w-full text-left p-2 rounded text-sm transition-colors ${
                        selectedVolumeGuid === guid
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                      }`}
                    >
                      <div className="font-mono text-xs truncate">
                        {guid}
                      </div>
                      <div className="text-xs text-gray-400 mt-1">
                        Volume {index + 1}
                      </div>
                    </button>
                  ))}
                </div>
              ) : (
                <div className="text-sm text-gray-400">
                  {motherFile ? 'Loading volumes...' : 'Upload a GLB file to see volume list'}
                </div>
              )}
            </div>

            {/* Volume Information Panel */}
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-3">Volume Information</h3>
            
            {selectedVolume ? (
              <div className="space-y-4">
                {/* Volume Details */}
                <div className="bg-gray-700 p-3 rounded">
                  <h4 className="font-medium text-white mb-2">Selected Volume</h4>
                  <div className="text-sm text-gray-400 space-y-1">
                    <div>GUID: {selectedVolume.guid || 'Unknown'}</div>
                    <div>Name: {selectedVolume.name || 'Unnamed'}</div>
                    <div>Type: Bounding Box</div>
                  </div>
                </div>

                {/* Revit BIM Parameters */}
                {revitData && revitData.metadata && revitData.metadata.length > 0 ? (
                  <div className="bg-gray-700 p-3 rounded">
                    <h4 className="font-medium text-blue-400 mb-2">
                      Revit Parameters ({revitData.metadata.length})
                    </h4>
                    <div className="space-y-1 max-h-96 overflow-y-auto pr-2">
                      {revitData.metadata.map((param: any) => (
                        <div key={param.parameterName} className="flex justify-between items-start py-1 pr-2">
                          <span className="text-xs text-gray-400 flex-shrink-0">{param.parameterName}:</span>
                          <span className="text-xs text-white font-mono text-right ml-2 break-all">
                            {param.parameterValue || '<empty>'}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                ) : revitData === null && selectedVolume ? (
                  <div className="bg-yellow-900/20 border border-yellow-600 p-3 rounded">
                    <p className="text-sm text-yellow-300">
                      No Revit data found for this volume GUID
                    </p>
                  </div>
                ) : null}
              </div>
            ) : (
              <div className="flex items-center justify-center h-32 text-gray-400">
                <div className="text-center">
                  <div className="text-2xl mb-2">üéØ</div>
                  <p className="text-sm">Select a Volume</p>
                  <p className="text-xs mt-1">Click on any bounding box to see details</p>
                </div>
              </div>
            )}
            </div>
          </div>
        </div>
      </div>

      {/* Upload Section - Bottom */}
      <div className="bg-gray-800 border-t border-gray-700 p-6">
        <div className="max-w-6xl mx-auto">
          <h3 className="text-lg font-semibold mb-4">File Management</h3>
          
          {hasExistingFile && (
            <div className="mb-4 p-3 bg-green-900/20 border border-green-600/30 rounded">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span className="text-sm font-medium text-green-300">Persistent Mother GLB Ready</span>
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={checkForExistingFile}
                    className="text-xs text-green-400 hover:text-green-300 transition-colors"
                  >
                    Refresh
                  </button>
                  <button
                    onClick={clearPersistentFile}
                    className="text-xs text-red-400 hover:text-red-300 transition-colors"
                  >
                    Clear
                  </button>
                </div>
              </div>
              <div className="text-xs text-green-200">
                File: {uploadedFileName}
              </div>
              {fileLastModified && (
                <div className="text-xs text-gray-400">
                  Last updated: {new Date(fileLastModified).toLocaleString()}
                </div>
              )}
            </div>
          )}
          
          <div className="bg-gray-700 rounded-lg p-4">
            <label className="block">
              <span className="text-sm text-gray-300 mb-2 block">
                {hasExistingFile ? 'Upload New Mother GLB (will replace existing):' : 'Upload Mother GLB File:'}
              </span>
              <input
                type="file"
                accept=".glb"
                onChange={handleFileUpload}
                disabled={uploading}
                className="block w-full text-sm text-gray-300
                  file:mr-4 file:py-2 file:px-4
                  file:rounded file:border-0
                  file:text-sm file:font-semibold
                  file:bg-blue-600 file:text-white
                  hover:file:bg-blue-700
                  file:cursor-pointer
                  disabled:file:bg-gray-500"
              />
            </label>
            <div className="flex justify-between items-center mt-2">
              <p className="text-xs text-gray-400">
                {uploading ? 'Uploading...' : (hasExistingFile ? 'Auto-loaded from persistent storage' : 'No file uploaded')}
              </p>
              <p className="text-xs text-gray-500">
                .glb only
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Footer */}
      <div className="fixed bottom-4 right-4">
        <p className="text-xs text-gray-500">designed by Emre</p>
      </div>
      </div>
    </>
  )
}